/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.bankAppclient;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-02-04")
public class TManager implements org.apache.thrift.TBase<TManager, TManager._Fields>, java.io.Serializable, Cloneable, Comparable<TManager> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TManager");

  private static final org.apache.thrift.protocol.TField ACCOUNT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BRANCH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("branchCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TManagerStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TManagerTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String accountNumber; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String branchCode; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String username; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_NUMBER((short)1, "accountNumber"),
    BRANCH_CODE((short)2, "branchCode"),
    USERNAME((short)3, "username");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_NUMBER
          return ACCOUNT_NUMBER;
        case 2: // BRANCH_CODE
          return BRANCH_CODE;
        case 3: // USERNAME
          return USERNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("accountNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRANCH_CODE, new org.apache.thrift.meta_data.FieldMetaData("branchCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TManager.class, metaDataMap);
  }

  public TManager() {
  }

  public TManager(
    java.lang.String accountNumber,
    java.lang.String branchCode,
    java.lang.String username)
  {
    this();
    this.accountNumber = accountNumber;
    this.branchCode = branchCode;
    this.username = username;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TManager(TManager other) {
    if (other.isSetAccountNumber()) {
      this.accountNumber = other.accountNumber;
    }
    if (other.isSetBranchCode()) {
      this.branchCode = other.branchCode;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
  }

  public TManager deepCopy() {
    return new TManager(this);
  }

  @Override
  public void clear() {
    this.accountNumber = null;
    this.branchCode = null;
    this.username = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAccountNumber() {
    return this.accountNumber;
  }

  public TManager setAccountNumber(@org.apache.thrift.annotation.Nullable java.lang.String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  public void unsetAccountNumber() {
    this.accountNumber = null;
  }

  /** Returns true if field accountNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNumber() {
    return this.accountNumber != null;
  }

  public void setAccountNumberIsSet(boolean value) {
    if (!value) {
      this.accountNumber = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBranchCode() {
    return this.branchCode;
  }

  public TManager setBranchCode(@org.apache.thrift.annotation.Nullable java.lang.String branchCode) {
    this.branchCode = branchCode;
    return this;
  }

  public void unsetBranchCode() {
    this.branchCode = null;
  }

  /** Returns true if field branchCode is set (has been assigned a value) and false otherwise */
  public boolean isSetBranchCode() {
    return this.branchCode != null;
  }

  public void setBranchCodeIsSet(boolean value) {
    if (!value) {
      this.branchCode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public TManager setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ACCOUNT_NUMBER:
      if (value == null) {
        unsetAccountNumber();
      } else {
        setAccountNumber((java.lang.String)value);
      }
      break;

    case BRANCH_CODE:
      if (value == null) {
        unsetBranchCode();
      } else {
        setBranchCode((java.lang.String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_NUMBER:
      return getAccountNumber();

    case BRANCH_CODE:
      return getBranchCode();

    case USERNAME:
      return getUsername();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_NUMBER:
      return isSetAccountNumber();
    case BRANCH_CODE:
      return isSetBranchCode();
    case USERNAME:
      return isSetUsername();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TManager)
      return this.equals((TManager)that);
    return false;
  }

  public boolean equals(TManager that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_accountNumber = true && this.isSetAccountNumber();
    boolean that_present_accountNumber = true && that.isSetAccountNumber();
    if (this_present_accountNumber || that_present_accountNumber) {
      if (!(this_present_accountNumber && that_present_accountNumber))
        return false;
      if (!this.accountNumber.equals(that.accountNumber))
        return false;
    }

    boolean this_present_branchCode = true && this.isSetBranchCode();
    boolean that_present_branchCode = true && that.isSetBranchCode();
    if (this_present_branchCode || that_present_branchCode) {
      if (!(this_present_branchCode && that_present_branchCode))
        return false;
      if (!this.branchCode.equals(that.branchCode))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAccountNumber()) ? 131071 : 524287);
    if (isSetAccountNumber())
      hashCode = hashCode * 8191 + accountNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetBranchCode()) ? 131071 : 524287);
    if (isSetBranchCode())
      hashCode = hashCode * 8191 + branchCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TManager other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAccountNumber()).compareTo(other.isSetAccountNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNumber, other.accountNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBranchCode()).compareTo(other.isSetBranchCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBranchCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branchCode, other.branchCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TManager(");
    boolean first = true;

    sb.append("accountNumber:");
    if (this.accountNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.accountNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("branchCode:");
    if (this.branchCode == null) {
      sb.append("null");
    } else {
      sb.append(this.branchCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (accountNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountNumber' was not present! Struct: " + toString());
    }
    if (branchCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'branchCode' was not present! Struct: " + toString());
    }
    if (username == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TManagerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TManagerStandardScheme getScheme() {
      return new TManagerStandardScheme();
    }
  }

  private static class TManagerStandardScheme extends org.apache.thrift.scheme.StandardScheme<TManager> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TManager struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNumber = iprot.readString();
              struct.setAccountNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BRANCH_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.branchCode = iprot.readString();
              struct.setBranchCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TManager struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accountNumber != null) {
        oprot.writeFieldBegin(ACCOUNT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.accountNumber);
        oprot.writeFieldEnd();
      }
      if (struct.branchCode != null) {
        oprot.writeFieldBegin(BRANCH_CODE_FIELD_DESC);
        oprot.writeString(struct.branchCode);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TManagerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TManagerTupleScheme getScheme() {
      return new TManagerTupleScheme();
    }
  }

  private static class TManagerTupleScheme extends org.apache.thrift.scheme.TupleScheme<TManager> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TManager struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.accountNumber);
      oprot.writeString(struct.branchCode);
      oprot.writeString(struct.username);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TManager struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.accountNumber = iprot.readString();
      struct.setAccountNumberIsSet(true);
      struct.branchCode = iprot.readString();
      struct.setBranchCodeIsSet(true);
      struct.username = iprot.readString();
      struct.setUsernameIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

